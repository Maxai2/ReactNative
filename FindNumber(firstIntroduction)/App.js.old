import GoalItem from "./components/GoalItem";
import GoalInput from "./components/GoalInput";

export default function App() {
  const [courseGoals, setCourseGoals] = useState([]);
  const [isAddMode, setIsAddMode] = useState(false);

  const addGoalHandler = (goalTitle) => {
    // setCourseGoals([...courseGoals, enteredGoal]);
    // setCourseGoals((currentGoal) => [...courseGoals, enteredGoal]);
    if (goalTitle.length === 0) {
      return;
    }

    setCourseGoals((currentGoal) => [
      ...courseGoals,
      // { key: Math.random().toString(), value: goalTitle },
      { id: Math.random().toString(), value: goalTitle },
    ]);

    setIsAddMode(false);

  };

  const removeGoalHandler = (goalId) => {
    setCourseGoals((currentGoals) => {
      return currentGoals.filter((goal) => goal.id !== goalId);
    });
  };

  const cancelGoalAdditionHandler = () => {
    setIsAddMode(false);
  };

  return (
    <View style={styles.wrap}>
      <Button title="Add New Goal" onPress={() => setIsAddMode(true)}/>
      <GoalInput visible={isAddMode} onAddGoal={addGoalHandler} onCancel={cancelGoalAdditionHandler}/>
      <FlatList
        keyExtractor={(item, index) => item.id}
        data={courseGoals}
        renderItem={(itemData) => (
          <GoalItem
            id={itemData.item.id}
            title={itemData.item.value}
            onDelete={removeGoalHandler}
          />
        )}
      />

      {/* <ScrollView View style={styleGoalList.container}>
        {courseGoals.map((goal, index) => (
          <View style={styleGoalList.item} key={index}>
            <Text>{goal}</Text>
          </View>
        ))}
      </ScrollView> */}

      {/* <View style={styleFlex.container}>
        <View style={styleFlexContRed.container}>
          <Text style={styleFlexText.container}>1</Text>
        </View>

        <View style={styleFlexContBlue.container}>
          <Text style={styleFlexText.container}>2</Text>
        </View>

        <View style={styleFlexContGreen.container}>
          <Text style={styleFlexText.container}>3</Text>
        </View>
      </View> */}

      {/* <Text>{outputText}</Text>
      <Button title="Change text" onPress={() => setOutputText("The text changed!")}/> */}
    </View>
  );
}

const styles = StyleSheet.create({
  wrap: {
    padding: 50,
  },
});

const styleGoalList = StyleSheet.create({
  container: {
    marginVertical: 5,
  },
});

const styleFlex = StyleSheet.create({
  container: {
    flexDirection: 'row',
    // alignItems: "stretch"
  }
});

const styleFlexText = StyleSheet.create({
  container: {
    color: 'black',
  }
});

const styleFlexContRed = StyleSheet.create({
  container: {
    backgroundColor: 'red',
    flex: 1,
    width: 100,
    height: 100,
    justifyContent: "center",
    alignItems: "center"
  }
});

const styleFlexContBlue = StyleSheet.create({
  container: {
    backgroundColor: 'blue',
    flex: 2,
    width: 100,
    height: 100,
    justifyContent: "center",
    alignItems: "center"
  }
});

const styleFlexContGreen = StyleSheet.create({
  container: {
    backgroundColor: 'green',
    flex: 3,
    width: 100,
    height: 100,
    justifyContent: "center",
    alignItems: "center"
  }
});
